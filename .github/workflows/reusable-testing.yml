name: Testing

on:
  workflow_call:
    inputs:
      minimum-php:
        description: 'Minimum PHP version to test against.'
        type: string
        required: false
        default: '5.6'
      minimum-wp:
        description: 'Minimum WP version to test against.'
        type: string
        required: false
        default: '3.7'

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  get-matrix:
    name: Get base test matrix
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.base-matrix.outputs.matrix }}
    steps:
    - name: Set matrix
      id: base-matrix
      run: |
        MATRIX=$(cat << EOF
        {
          "include": [
            {
              "php": "7.2",
              "wp": "latest",
              "mysql": "8.0"
            },
            {
              "php": "7.2",
              "wp": "latest",
              "dbtype": "sqlite"
            },
            {
              "php": "7.3",
              "wp": "latest",
              "mysql": "8.0"
            },
            {
              "php": "7.3",
              "wp": "latest",
              "dbtype": "sqlite"
            },
            {
              "php": "7.4",
              "wp": "latest",
              "mysql": "8.0"
            },
            {
              "php": "7.4",
              "wp": "latest",
              "dbtype": "sqlite"
            },
            {
              "php": "8.0",
              "wp": "latest",
              "mysql": "8.0"
            },
            {
              "php": "8.0",
              "wp": "latest",
              "dbtype": "sqlite"
            },
            {
              "php": "8.1",
              "wp": "latest",
              "mysql": "8.0"
            },
            {
              "php": "8.1",
              "wp": "latest",
              "dbtype": "sqlite"
            },
            {
              "php": "8.2",
              "wp": "latest",
              "mysql": "8.0"
            },
            {
              "php": "8.2",
              "wp": "latest",
              "dbtype": "sqlite"
            },
            {
              "php": "7.2",
              "wp": "trunk",
              "mysql": "8.0"
            },
            {
              "php": "7.2",
              "wp": "trunk",
              "mysql": "5.7"
            },
            {
              "php": "7.2",
              "wp": "trunk",
              "mysql": "5.6"
            },
            {
              "php": "7.4",
              "wp": "trunk",
              "mysql": "8.0"
            },
            {
              "php": "8.0",
              "wp": "trunk",
              "mysql": "8.0"
            },
            {
              "php": "8.0",
              "wp": "trunk",
              "mysql": "5.7"
            },
            {
              "php": "8.0",
              "wp": "trunk",
              "mysql": "5.6"
            },
            {
              "php": "8.1",
              "wp": "trunk",
              "mysql": "8.0"
            },
            {
              "php": "8.2",
              "wp": "trunk",
              "mysql": "8.0"
            },
            {
              "php": "5.6",
              "wp": "3.7",
              "mysql": "5.6"
            },
            {
              "php": "5.6",
              "wp": "6.2",
              "mysql": "8.0"
            },
            {
              "php": "8.3",
              "wp": "trunk",
              "mysql": "8.0"
            },
            {
              "php": "8.2",
              "wp": "trunk",
              "dbtype": "sqlite"
            },
            {
              "php": "8.3",
              "wp": "trunk",
              "dbtype": "sqlite"
            },
            {
              "php": "8.4",
              "wp": "trunk",
              "mysql": "8.0"
            },
            {
              "php": "8.4",
              "wp": "trunk",
              "dbtype": "sqlite"
            }
          ]
        }
        EOF
        )
        echo matrix=$MATRIX >> $GITHUB_OUTPUT

  prepare-unit:
    name: Prepare matrix for unit tests
    needs: get-matrix
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Check existence of composer.json & phpunit.xml.dist files
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files: "composer.json, phpunit.xml.dist"

      - name: Set matrix
        id: set-matrix
        run: |
          if [[ $FILE_EXISTS == 'true' ]]; then
            echo "matrix=$(jq -c '.include |= map(with_entries(select(.key == "php"))) | .include |= map(select(.php >= "${{ inputs.minimum-php }}")) | .include |= unique_by(.php)' <<< $BASE_MATRIX)" >> $GITHUB_OUTPUT
          else
            echo "matrix=" >> $GITHUB_OUTPUT
          fi
        env:
          BASE_MATRIX: ${{ needs.get-matrix.outputs.matrix }}
          FILE_EXISTS: ${{ steps.check_files.outputs.files_exists == 'true' }}

  unit: #-----------------------------------------------------------------------
    needs: prepare-unit
    if: ${{ needs.prepare-unit.outputs.matrix != '' }}
    name: Unit test /  PHP ${{ matrix.php }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-unit.outputs.matrix) }}
    runs-on: ubuntu-20.04

    continue-on-error: ${{ matrix.php == '8.4' }}

    steps:
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Set up PHP environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: '${{ matrix.php }}'
          coverage: none
          tools: composer,cs2pr
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Composer dependencies & cache dependencies
        uses: "ramsey/composer-install@v3"
        env:
          COMPOSER_ROOT_VERSION: dev-${{ github.event.repository.default_branch }}
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: Grab PHPUnit version
        id: phpunit_version
        run: echo "VERSION=$(vendor/bin/phpunit --version | grep --only-matching --max-count=1 --extended-regexp '\b[0-9]+\.[0-9]+')" >> $GITHUB_OUTPUT

      - name: Determine PHPUnit flavour
        id: phpunit_version
        run: |
          if [ startsWith( steps.phpunit_version.outputs.VERSION, '10.' ) }}" == "true" ]; then
            echo 'FLAVOUR=gte10' >> $GITHUB_OUTPUT
          else
            echo 'FLAVOUR=lte9' >> $GITHUB_OUTPUT
          fi

      # PHPUnit 10 may fail a test run when the "old" configuration format is used.
      # Luckily, there is a build-in migration tool since PHPUnit 9.3.
      - name: Migrate PHPUnit configuration for PHPUnit 10+
        if: ${{ steps.phpunit_version.outputs.FLAVOUR == 'gte10' }}
        continue-on-error: true
        run: composer phpunit -- --migrate-configuration

      - name: Setup problem matcher to provide annotations for PHPUnit
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Run PHPUnit
        run: composer phpunit

  prepare-functional: #---------------------------------------------------------
    name: Prepare matrix for functional tests
    needs: get-matrix
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Check existence of composer.json & behat.yml files
        id: check_files
        uses: andstor/file-existence-action@v3
        with:
          files: "composer.json, behat.yml"

      - name: Set matrix
        id: set-matrix
        run: |
          if [[ $FILE_EXISTS == 'true' ]]; then
            echo "matrix=$(jq -c '.include |= map(select(.wp == "3.7").wp |= "${{ inputs.minimum-wp }}") | .include |= map(select(.php >= "${{ inputs.minimum-php }}"))' <<< $BASE_MATRIX)" >> $GITHUB_OUTPUT
          else
            echo "matrix=" >> $GITHUB_OUTPUT
          fi
        env:
          BASE_MATRIX: ${{ needs.get-matrix.outputs.matrix }}
          FILE_EXISTS: ${{ steps.check_files.outputs.files_exists == 'true' }}

  functional: #-----------------------------------------------------------------
    needs: prepare-functional
    if: ${{ needs.prepare-functional.outputs.matrix != '' }}
    name: Functional - WP ${{ matrix.wp }} on PHP ${{ matrix.php }} with ${{ matrix.dbtype != 'sqlite' && format('MySQL {0}', matrix.mysql) || 'SQLite' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-functional.outputs.matrix) }}
    runs-on: ubuntu-20.04

    continue-on-error: ${{ matrix.dbtype == 'sqlite' || matrix.php == '8.4' }}

    steps:
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Install Ghostscript
        run: |
          sudo apt-get update
          sudo apt-get install ghostscript -y

      - name: Set up PHP environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: '${{ matrix.php }}'
          extensions: gd, imagick, mysql, zip
          coverage: none
          tools: composer
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Change ImageMagick policy to allow pdf->png conversion.
        run: |
          sudo sed -i 's/^.*policy.*coder.*none.*PDF.*//' /etc/ImageMagick-6/policy.xml

      - name: Install Composer dependencies & cache dependencies
        uses: "ramsey/composer-install@v3"
        env:
          COMPOSER_ROOT_VERSION: dev-${{ github.event.repository.default_branch }}
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: Setup MySQL Server
        id: setup-mysql
        if: ${{ matrix.dbtype != 'sqlite' }}
        uses: shogo82148/actions-setup-mysql@v1
        with:
          mysql-version: ${{ matrix.mysql }}
          auto-start: true
          root-password: root
          user: wp_cli_test
          password: password1
          my-cnf: |
            default_authentication_plugin=mysql_native_password

      - name: Configure DB environment
        if: ${{ matrix.dbtype != 'sqlite' }}
        run: |
          echo "MYSQL_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "MYSQL_TCP_PORT=3306" >> $GITHUB_ENV
          echo "WP_CLI_TEST_DBROOTUSER=root" >> $GITHUB_ENV
          echo "WP_CLI_TEST_DBROOTPASS=root" >> $GITHUB_ENV
          echo "WP_CLI_TEST_DBNAME=wp_cli_test" >> $GITHUB_ENV
          echo "WP_CLI_TEST_DBUSER=wp_cli_test" >> $GITHUB_ENV
          echo "WP_CLI_TEST_DBPASS=password1" >> $GITHUB_ENV
          echo "WP_CLI_TEST_DBHOST=127.0.0.1:3306" >> $GITHUB_ENV

      - name: Prepare test database
        if: ${{ matrix.dbtype != 'sqlite' }}
        run: composer prepare-tests

      - name: Check Behat environment
        env:
          WP_VERSION: '${{ matrix.wp }}'
          WP_CLI_TEST_DBTYPE: ${{ matrix.dbtype || 'mysql' }}
          WP_CLI_TEST_DBSOCKET: '${{ steps.setup-mysql.outputs.base-dir }}/tmp/mysql.sock'
        run: WP_CLI_TEST_DEBUG_BEHAT_ENV=1 composer behat

      - name: Run Behat
        env:
          WP_VERSION: '${{ matrix.wp }}'
          WP_CLI_TEST_DBTYPE: ${{ matrix.dbtype || 'mysql' }}
          WP_CLI_TEST_DBSOCKET: '${{ steps.setup-mysql.outputs.base-dir }}/tmp/mysql.sock'
        run: composer behat || composer behat-rerun
